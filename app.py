import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import yagmail
import random
import datetime
from fpdf import FPDF
from io import BytesIO



scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

creds = ServiceAccountCredentials.from_json_keyfile_name(
    r"gspread-creds.json", scope)
client = gspread.authorize(creds)
sheet_url = "https://docs.google.com/spreadsheets/d/1xY6RLbn__y3T7gnTJ7tCCDpbLbNYNsjidpDIhEiRn3w/edit?usp=sharing"
sheet = client.open_by_url(sheet_url).sheet1

def generate_unique_id():
    return "MIT" + ''.join([str(random.randint(0, 9)) for _ in range(3)])

def send_email(receiver_email, unique_id, name):
    sender_email = "a15767089@gmail.com"
    sender_password = "mmld ufkk xntg ucrt"

    subject = "MIT Registration Successful"
    body = f"Dear {name},\n\nThank you for registering at MIT.\nYour Unique ID is: {unique_id}\n\nRegards,\nMIT Admissions"

    try:
        yag = yagmail.SMTP(user=sender_email, password=sender_password)
        yag.send(to=receiver_email, subject=subject, contents=body)
        return True
    except Exception as e:
        st.error(f"Failed to send email: {e}")
        return False

from fpdf import FPDF
from io import BytesIO

def create_pdf(data):
    class StyledPDF(FPDF):
        def header(self):
            self.set_fill_color(200, 0, 0)
            self.set_text_color(255, 255, 255)
            self.set_font("Arial", 'B', 14)
            self.cell(0, 10, "MEERUT INSTITUTE OF TECHNOLOGY", ln=True, align="C", fill=True)
            self.set_font("Arial", 'B', 11)
            self.cell(0, 9, "Student Registration Form", ln=True, align="C")
            self.ln(3)

        def footer(self):
            self.set_y(-10)
            self.set_font("Arial", 'I', 8)
            self.set_text_color(120, 120, 120)
            self.cell(0, 8, "Generated by MIT Online Portal | Page " + str(self.page_no()), align="C")

        def section_title(self, title):
            self.set_font("Arial", 'B', 10)
            self.set_fill_color(230, 240, 255)
            self.set_text_color(0)
            self.cell(0, 6, f"  {title}", ln=True, fill=True)
            self.ln(1)

        def field(self, label, val, w1=30, w2=60, h=5.5):
            self.set_font("Arial", 'B', 9)
            self.set_text_color(40, 40, 40)
            self.cell(w1, h, label, border=0)
            self.set_font("Arial", '', 9)
            self.set_text_color(0)
            self.cell(w2, h, str(val), border=0)

        def newline(self, h=5.5):
            self.ln(h)

    pdf = StyledPDF(orientation='L', unit='mm', format='A4')
    pdf.add_page()
    pdf.set_auto_page_break(auto=False)

    pdf.set_font("Arial", 'B', 10)
    pdf.set_text_color(0)
    pdf.cell(0, 8, f"Unique ID: {data.get('Unique ID', '-')}", ln=True, align="R")

    pdf.section_title("1. Personal Information")
    pdf.field("Name:", data["Name"])
    pdf.field("Email:", data["Email"])
    pdf.field("Phone:", data["Phone"])
    pdf.newline()
    pdf.field("DOB:", data["Date of Birth"])
    pdf.field("Gender:", data["Gender"])
    pdf.field("Category:", "GEN")
    pdf.newline()
    pdf.field("Father's Name:", data["Father Name"])
    pdf.field("Mother's Name:", data["Mother Name"])
    pdf.newline()
    pdf.set_font("Arial", 'B', 9)
    pdf.cell(35, 5.5, "Address:", border=0)
    pdf.set_font("Arial", '', 9)
    pdf.multi_cell(0, 5.5, data["Address"])

    pdf.section_title("2. Academic Preferences")
    pdf.field("Course:", data["Course"])
    pdf.field("Entrance Exam:", data["Appeared Entrance Exam"])
    pdf.field("Exam Name:", data["Entrance Exam Name"])
    pdf.newline()

    pdf.section_title("3. 10th & 12th Board Details")
    pdf.field("10th %:", f"{data['10th Percentage']}%")
    pdf.field("12th %:", f"{data['12th Percentage']}%")
    pdf.newline()
    pdf.field("10th School:", data.get("10th School", "-"))
    pdf.field("10th Board:", data.get("10th Board", "-"))
    pdf.newline()
    pdf.field("12th School:", data.get("12th School", "-"))
    pdf.field("12th Board:", data.get("12th Board", "-"))
    pdf.newline()
    pdf.set_font("Arial", '', 9)
    pdf.multi_cell(0, 5, "10th Subjects: MATH | SCIENCE | ENGLISH | HINDI | SOCIAL SCIENCE | COMPUTER")
    pdf.multi_cell(0, 5, "12th Subjects: MATHS/BIO | PHYSICS | CHEMISTRY | COMPUTER | ENGLISH | PCM/PCB %")

    pdf.section_title("4. Other Course Details")
    pdf.field("Course:", data.get("Other Course", "-"))
    pdf.newline()
    pdf.field("College:", data.get("Other College", "-"))
    pdf.newline()
    pdf.field("University:", data.get("Other University", "-"))
    pdf.newline()
    pdf.field("Percentage:", f"{data.get('Other Percentage', '-')}")
    pdf.newline()

    pdf.section_title("5. Declaration & Signatures")
    pdf.set_font("Arial", '', 9)
    pdf.cell(0, 6, "Date: ____ / ____ / ______", ln=True)
    pdf.cell(0, 6, "Candidate Signature: ___________________________", ln=True)
    pdf.ln(4)

    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Admission Source:", ln=True)
    pdf.set_font("Arial", size=12)
    direct = data.get("Admission Source") == "Direct"
    ccb = data.get("Admission Source") == "CCB"
    pdf.cell(0, 8, f"[{'*' if direct else ' '}] Direct    [{'*' if ccb else ' '}] CCB", ln=True)
    pdf.ln(5)

    pdf.set_font("Arial", 'B', 10)
    pdf.cell(0, 6, "FOR OFFICE USE", ln=True)
    pdf.set_font("Arial", '', 9)
    pdf.multi_cell(0, 8, "COMMENTS/REMARKS:\n\n")
    pdf.cell(120, 8, "Chairman", ln=0)
    pdf.cell(0, 8, "Admission Counselor", ln=True)

    pdf_output = pdf.output(dest='S').encode('latin1')
    return BytesIO(pdf_output)

st.set_page_config(page_title="MIT Admission Form", layout="centered")

with st.spinner("Loading form..."):
    import time
    time.sleep(1.5)  

st.markdown("""
    <style>
        /* Animated Gradient Background */
        body {
            background: linear-gradient(270deg, #002855, #004080, #0059b3, #002855);
            background-size: 800% 800%;
            animation: gradientMove 20s ease infinite;
        }

        @keyframes gradientMove {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        html, body, [class*="css"]  {
            font-family: 'Segoe UI', sans-serif;
        }

        .stApp {
            max-width: 900px;
            margin: 0 auto;
            background-color: #ffffffdd;
            padding: 40px 30px 30px 30px;
            border-radius: 12px;
            box-shadow: 0px 0px 12px rgba(0,0,0,0.15);
        }

        h1, h4 {
            text-align: center;
            color: #ffffff;
            text-shadow: 1px 1px 2px #00000070;
        }

        .section-title {
            font-size: 20px;
            margin-top: 30px;
            font-weight: bold;
            color: #002855;
            border-bottom: 2px solid #00285520;
            padding-bottom: 6px;
        }

        .stTextInput > label, .stTextArea > label, .stSelectbox > label, .stRadio > label, .stNumberInput > label {
            font-weight: 600;
            color: #333333;
        }

        .stDownloadButton > button {
            background-color: #002855;
            color: white;
            font-weight: 600;
            padding: 8px 20px;
            border-radius: 6px;
        }

        .stDownloadButton > button:hover {
            background-color: #014aad;
            color: white;
        }

        .stFormSubmitButton > button {
            background-color: #004080;
            color: white;
            font-weight: bold;
            padding: 10px 25px;
            border-radius: 8px;
        }

        .stFormSubmitButton > button:hover {
            background-color: #0059b3;
        }

        .animate-fade {
            animation: fadeIn 1.2s ease-in-out both;
        }

        @keyframes fadeIn {
            0% { opacity: 0; transform: translateY(20px); }
            100% { opacity: 1; transform: translateY(0); }
        }
    </style>
""", unsafe_allow_html=True)


st.markdown('<div class="animate-fade">', unsafe_allow_html=True)

st.markdown("<h1>Meerut Institute of Technology</h1>", unsafe_allow_html=True)
st.markdown("<h4>Online Admission Registration Form</h4>", unsafe_allow_html=True)

with st.form("registration_form"):
    st.markdown('<div class="section-title">1. Personal Details</div>', unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    with col1:
        name = st.text_input("Full Name *")
        email = st.text_input("Email *")
        phone = st.text_input("Phone Number *")
        gender = st.radio("Gender", ["Male", "Female", "Other"])
        #dob = st.date_input("Date of Birth")
        dob = st.date_input(
        "Date of Birth",
    min_value=datetime.date(1960, 1, 1),   
    max_value=datetime.date(2025, 1, 1),   
    value=datetime.date(2000, 1, 1))
        
        category = st.selectbox("Category", ["GEN", "OBC", "SC", "ST", "Other"])
        address = st.text_area("Address")
        pin_code = st.text_input("PIN Code")

    with col2:
        father_name = st.text_input("Father's Name")
        father_phone = st.text_input("Father's Mobile Number")
        father_email = st.text_input("Father's Email")
        mother_name = st.text_input("Mother's Name")
        mother_phone = st.text_input("Mother's Mobile Number")
        occupation = st.text_input("Occupation (Father / Mother)")
        income = st.text_input("Family Annual Income")

    st.markdown('<div class="section-title">2. Academic Preferences</div>', unsafe_allow_html=True)
    col3, col4 = st.columns(2)
    with col3:
        course = st.selectbox("UG Course Preference", [
            "B.Tech CSE",
            "   └ B.Tech CSE (AI & ML)",
            "   └ B.Tech CSE (Data Science)",
            "B.Tech ECE",
            "B.Tech ME",
            "BCA",
            "BBA",
            "MBA",
            "MCA",
            "B.Pharm",
            "D.Pharm",
            "B.Sc. Agri",
            "B.Com (NEP)",
            "B.Com (Hons.)"
        ])
        entrance = st.radio("Appeared for Entrance Exam?", ["Yes", "No"])
        entrance_name = st.text_input("Entrance Exam Name (if any)")
        roll_no = st.text_input("Entrance Exam Roll Number")
    with col4:
        app_no = st.text_input("Application Number")
        score = st.text_input("Exam Score")

    st.markdown('<div class="section-title">3. 10th Board Details</div>', unsafe_allow_html=True)
    tenth_percentage = st.number_input("10th Percentage", 0.0, 100.0)
    tenth_school = st.text_input("10th School Name")
    tenth_board = st.text_input("10th Board Name")
    tenth_roll = st.text_input("10th Roll Number")

    st.markdown('<div class="section-title">4. 12th Board Details</div>', unsafe_allow_html=True)
    twelfth_percentage = st.number_input("12th Percentage", 0.0, 100.0)
    twelfth_school = st.text_input("12th School Name")
    twelfth_board = st.text_input("12th Board Name")
    twelfth_roll = st.text_input("12th Roll Number")

    st.markdown('<div class="section-title">5. Other Course Details (Optional)</div>', unsafe_allow_html=True)
    other_course = st.text_input("Other Course Name")
    other_college = st.text_input("Other College Name")
    other_university = st.text_input("University")
    other_percentage = st.number_input("Other Course Percentage", 0.0, 100.0, step=0.1)

    st.markdown('<div class="section-title">6. Source of Admission</div>', unsafe_allow_html=True)
    admission_source = st.radio("Admission Source", ["Direct", "CCB"])

    st.markdown('<br>', unsafe_allow_html=True)
    submitted = st.form_submit_button("Submit Application")


if submitted:
    if not name or not email:
        st.error("Please fill in at least Name and Email.")
    elif len(phone) != 10 or not phone.isdigit():
        st.error("Please enter a valid 10-digit phone number.")
    elif not course:
        st.error("Please select a Course.")
    else:
        unique_id = generate_unique_id()
        today = datetime.date.today().strftime("%d-%m-%Y") 

        row = [
            today, 
    unique_id,
    name,
    email,
    phone,
    gender,
    str(dob),category,father_name,father_phone,father_email,mother_name,
    mother_phone,occupation,income,address,pin_code,course,entrance,entrance_name,roll_no,
    app_no,score,tenth_percentage,tenth_school,
    tenth_board,tenth_roll,twelfth_percentage,twelfth_school,
    twelfth_board,twelfth_roll,other_course,other_college,other_university,other_percentage,admission_source
]

        sheet.append_row(row, value_input_option='USER_ENTERED', table_range='A1')
        email_status = send_email(email, unique_id, name)

        data_dict = {
    "Unique ID": unique_id,
    "Name": name,
    "Email": email,
    "Phone": phone,
    "Gender": gender,
    "Date of Birth": dob,
    "Category": category,
    "Father Name": father_name,
    "Father Phone": father_phone,
    "Father Email": father_email,
    "Mother Name": mother_name,
    "Mother Phone": mother_phone,
    "Occupation": occupation,
    "Annual Income": income,
    "Address": address,
    "PIN": pin_code,
    "Course": course,
    "Appeared Entrance Exam": entrance,
    "Entrance Exam Name": entrance_name,
    "Roll No": roll_no,
    "Application No": app_no,
    "Score": score,
    "10th Percentage": tenth_percentage,
    "10th School": tenth_school,
    "10th Board": tenth_board,
    "10th Roll No": tenth_roll,
    "12th Percentage": twelfth_percentage,
    "12th School": twelfth_school,
    "12th Board": twelfth_board,
    "12th Roll No": twelfth_roll,
    "Other Course": other_course,
    "Other College": other_college,
    "Other University": other_university,
    "Other Percentage": other_percentage,
    "Admission Source": admission_source
}
        pdf_buffer = create_pdf(data_dict)

        st.success("Registration Successful!")

        with st.expander("View your registration summary"):
            st.markdown(f"""
                **Unique ID**: `{unique_id}`  
                **Email Sent**: `{email}` {"✅" if email_status else "❌"}  
                Download your registration PDF below:
            """)
            st.download_button(
                label="Download Registration PDF",
                data=pdf_buffer,
                file_name=f"{unique_id}_registration.pdf",
                mime="application/pdf"
            )
        st.markdown('</div>', unsafe_allow_html=True)

        st.markdown("<hr>", unsafe_allow_html=True)
